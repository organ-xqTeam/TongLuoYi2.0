package com.tly.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.tly.model.Member;
import com.tly.service.ICommissionrewardService;
import com.tly.service.IEquipmentService;
import com.tly.service.IEquipmentSublistService;
import com.tly.service.IFinanceService;
import com.tly.service.IMemberService;
import com.tly.service.IPartnerEquipmentService;
import com.tly.service.IPartnerService;
import com.tly.service.IUserStatisticsService;
import com.tly.util.ScanServer;
import com.tly.util.YesOrNo;

import jdk.nashorn.api.scripting.JSObject;

/**
 * @author moxiuchuan
 * 会员控制器
 * 11点17分
 */
@Controller
@RequestMapping("/member")
public class MemberController {
	
	@Autowired
	private HttpServletRequest request;
	
	@Autowired
	private IMemberService ims;//会员服务
	
	@Autowired
	private IEquipmentService ies;//设备服务
	
	@Autowired
	private IPartnerService ips; //合伙人服务
	
	@Autowired
	private IFinanceService ifs;
	
	@Autowired
	private ICommissionrewardService ics;
	
	@Autowired
	private IEquipmentSublistService iess;
	
	@Autowired
	private IPartnerEquipmentService ipes;
	
	@Autowired
	private IUserStatisticsService ius;
	
	private String Equipmentnumber; //设备码

	/**
	 * 根据手机号查询会员id
	 * @return 存在：会员id 不存在：null
	 */
	@RequestMapping("/selectOneByPhone")
	@ResponseBody
	public Integer selectOneByPhone(String phonenum) {
		
		Integer mid = ims.selectOneByPhone(phonenum);

		return mid;
	}
	
	/**
	 * 检查他应该付多少钱
	 * @return 钱数
	 */
	@RequestMapping("/selectMoneyByScan")
	@ResponseBody
	public Map selectMoneyByScan(String Equipmentnumber,String wxid,String phonenum) {
		//1.工具
		Map map = new HashMap();
		this.Equipmentnumber = Equipmentnumber;
		//2.判断该设备的状态state
		Integer state = selectStateByEquipmentnumber();
		if (state != 0) {
			//3.检查该用户是否是会员
			Member mem = ims.selectOneMemberByWxid(wxid);
			if (mem == null) {//如果是null就回调让他注册会员
				map.put("key", "memberType");
				map.put("value", 0);
				return map;
			}
			//4.判断该设备是否是购买的，如果是购买的扫码不收钱，并且对应的上线没有提成
			Integer form = ips.selectEquipmentForm(Equipmentnumber);
			if(form == 2) {//直接返回该设备为购买的 扫码不需要支付
				map.put("key", "EquipmentForm");
				map.put("value", 2);
				return map;
			}
			Member selectOneMemberByWxid = ims.selectOneMemberByWxid(wxid);
			//5.用户的角色
			if(selectOneMemberByWxid.getType() == 4){//假定维修工的类型为4，具体要统一###
				map.put("key", "memberType");
				map.put("value", 4);
				return map;
			}else{//不是维修工的时候
				//6.判断用户使用次数
				Integer mid = mem.getId();
				Integer sum = ims.selectUseSumByMid(mid);
				if(sum == 0){
					map.put("key", "money");
					map.put("value", 0);
					//创建任务线程用来执行提成办法和订单服务
					startScanServer(wxid);
					return map;
				}else if(sum == 1) {
					map.put("key", "money");
					map.put("value", 1);
					//创建任务线程用来执行提成办法和订单服务
					startScanServer(wxid);
					return map;
				}else {
					//收取正常价格
					Double money = ies.selectMoneyByEquipmentnumber(Equipmentnumber);
					map.put("key", "money");
					map.put("value", money);
					//创建任务线程用来执行提成办法和订单服务
					startScanServer(wxid);
					return map;
				}
			}
		}else {
			map.put("key", "memberStatus");
			map.put("value", state);
			return map;
		}
	}
	
	/**
	 * 启动扫码之后的服务
	 * @param mid 会员id
	 */
	private void startScanServer(String wxid) {
		//创建任务线程用来执行提成办法和订单服务
		Thread t = new Thread(new ScanServer(ims,wxid,ips,Equipmentnumber,ies,ifs,ics,iess,ipes));
		t.start();
		if (t.isInterrupted()) {
			t.interrupt();
		}
	}
	
	/**
	 * 查询该设备是否可用
	 * @return 状态值
	 */
	@RequestMapping("selectStateByEquipmentnumber")
	@ResponseBody
	private Integer selectStateByEquipmentnumber() {
		Integer state = ies.selectStateByEquipmentnumber(Equipmentnumber);
		if (state == 1 || state == 3 || state == 4) {
			return 0;
		}
		return state;
	}
	
	/**
	 * 会员管理
	 * yangweihang
	 * @Date 2018年8月26日 下午1:55:46
	 * @return
	 */
	@RequestMapping("/selectByMember")
	public String selectByMember(){
		List<Map<String, Object>> list = ims.selectByMember();
		//变换汉字
		for(Map<String,Object> m : list){
			if((int)m.get("sex") == YesOrNo.ON){
				m.replace("sex", "男");
			}
			if(m.get("sex") == YesOrNo.YES){
				m.replace("sex", "女");
			}
		}
		request.setAttribute("list", list);
		return "member/manage";
	}
	
	/**
	 * 查询一级上线
	 * yangweihang
	 * @Date 2018年8月26日 下午3:11:24
	 * @param wxid
	 * @return
	 */
	@RequestMapping("/onone")
	public String selectonone(String wxid) {
		Member m = ims.selectonone(wxid);
		request.setAttribute("m", m);
		return "member/onmember";
	}


	/**
	 * 查询二级上线
	 * yangweihang
	 * @Date 2018年8月26日 下午3:11:35
	 * @param wxid
	 * @return
	 */
	@RequestMapping("/ontwo")
	public String selectontwo(String wxid) {
		Member m = ims.selectontwo(wxid);
		request.setAttribute("m", m);
		return "member/onmember";
	}


	/**
	 * 查询一级下线
	 * yangweihang
	 * @Date 2018年8月26日 下午3:11:46
	 * @param wxid
	 * @return
	 */
	@RequestMapping("/upone")
	public String selectupone(String wxid) {
		 List<Member> list = ims.selectupone(wxid);
		 request.setAttribute("list", list);
		 return "member/upmember";
	}


	/**
	 * 查询二级下线
	 * yangweihang
	 * @Date 2018年8月26日 下午3:11:59
	 * @param wxid
	 * @return
	 */
	@RequestMapping("/uptwo")
	public String selectuptwo(String wxid) {
		 List<Member> list = ims.selectuptwo(wxid);
		 request.setAttribute("list", list);
		 return "member/upmember";
	}
	
	/**
	 * 查询该会员一级下线的人数
	 * @param wxid 微信id
	 * @return 一级下线人数
	 */
	@RequestMapping("/selectDownOneSum")
	@ResponseBody
	public Integer selectDownOneSum(String wxid) {
		List<Member> list = ims.selectupone(wxid);
		Integer sum = list.size();
		return sum;
	}
	
	
	/**
	 * 查询该会员的二级下线人数
	 * @param wxid 会员微信id
	 * @return 二级下线人数
	 */
	@RequestMapping("/selectDownTwoSum")
	@ResponseBody
	public Integer selectDownTwoSum(String wxid) {
		List<Member> list = ims.selectuptwo(wxid);
		Integer sum = list.size();
		return sum;
	}
	
	/**
	 * 根据该用户id查询该用户一级下线的微信id和成为下线方式的列表
	 * @param wxid 该用户的微信id
	 * @return list
	 */
	@RequestMapping("/selectDownOneWxidAndType")
	@ResponseBody
	public List<Map> selectDownOneWxidAndType(String wxid) {
		List<Map> list = ims.selectDownOneWxidAndType(wxid);
		return list;
	}
	/**
	 * 查询该会员的二级下线人数和 根据该用户id查询该用户一级下线的微信id和成为下线方式的列表
	 * @param wxid 用户微信id
	 * @return 上面两个方法的集合
	 */
	@RequestMapping("selectSumOneAndTwo")
	@ResponseBody
	public Map selectSumOneAndTwo(String wxid) {
		List<Map> selectDownOneWxidAndType = selectDownOneWxidAndType(wxid);
		Integer selectDownTwoSum = selectDownTwoSum(wxid);
		
		Map map = new HashMap();
		map.put("DownOneWxidAndType", selectDownOneWxidAndType);
		map.put("sum", selectDownTwoSum);
		return map;
	}
	
	/**
	 * 根据该用户微信id查询该用户一级下线微信id和一级下线的一级下线有多少人
	 * @param wxid 该用户的微信id
	 * @return list
	 */
	@RequestMapping("selectDownOneWxidAndSumTwo")
	@ResponseBody
	public List<Map> selectDownOneWxidAndSumTwo(String wxid) {
		
		List<Map> list = ims.selectDownOneWxidAndSumTwo(wxid);
		return list;
	}
	
	/**
	 * 查询该账户余额
	 * @param wxid 微信id
	 * @return 该账户余额
	 */
	@RequestMapping("selectRemainMoney")
	@ResponseBody
	public Double selectRemainMoney(String wxid) {
		Double remainMoney = ims.selectRemainMoney(wxid);
		return remainMoney;
	}
}
